generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  email    String?   @unique @db.VarChar(255)
  phone    String    @db.VarChar(50)
  password String    @db.VarChar(255)
  isAdmin  String    @default("user") @db.VarChar(50)
  Booking  Booking[]
  Rating   Rating[]
  Review   Review[]

  @@map("user")
}

model Event {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  description String  @db.Text
  photo       String? @db.LongText
  Venue       Venue[]
}

model Venue {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(50)
  photo1    String?     @db.LongText
  photo2    String?     @db.LongText
  photo3    String?     @db.LongText
  eventId   Int
  Event     Event       @relation(fields: [eventId], references: [id])
  VenueType VenueType[]
  Booking   Booking[]
}

model VenueType {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  photo       String? @db.LongText
  description String  @db.Text
  price       Float
  venue_id    Int
  Venue       Venue   @relation(fields: [venue_id], references: [id])
}

model FloralService {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  photo       String?   @db.LongText
  description String    @db.Text
  price       Float
  bookings    Booking[]
}

model TimePackage {
  id       Int       @id @default(autoincrement())
  photo    String?   @db.LongText
  date     DateTime
  time     DateTime
  bookings Booking[]
}

model Booking {
  id                Int           @id @default(autoincrement())
  venue             Venue         @relation(fields: [venue_id], references: [id])
  venue_id          Int
  floral_service    FloralService @relation(fields: [floral_service_id], references: [id])
  floral_service_id Int
  time_package      TimePackage   @relation(fields: [time_package_id], references: [id])
  time_package_id   Int
  user              User          @relation(fields: [user_id], references: [id])
  user_id           Int
  booking_date      DateTime
  total_amount      Int
}

model Contact {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  email   String @db.VarChar(255)
  subject String @db.VarChar(255)
  message String @db.VarChar(255)

  @@map("contact")
}

model Rating {
  id      Int      @id @default(autoincrement())
  user    User     @relation(fields: [user_id], references: [id])
  user_id Int
  rating  Int
  reviews Review[] // Changed from Review? to Review[] for one-to-many
}

model Review {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id])
  user_id     Int
  rating      Rating   @relation(fields: [rating_id], references: [id])
  rating_id   Int // No @unique needed now
  review_date DateTime
  description String   @db.Text
  photo       String?  @db.Text
}

enum Role {
  user
  admin
}

enum Status {
  active
  inactive
}
