generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  email        String?        @unique @db.VarChar(255)
  phone        String         @db.VarChar(50)
  password     String         @db.VarChar(255)
  photo        String?        @db.LongText
  isAdmin      String         @default("user") @db.VarChar(50)
  Booking      Booking[]
  Review       Review[]
  Notification Notification[]

  @@map("user")
}

model Event {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(50)
  description   String          @db.Text
  photo         String?         @db.LongText
  Venue         Venue[]
  FloralService FloralService[]
  TimePackage   TimePackage[]
  Notification  Notification[]
}

model Venue {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(50)
  photo1        String?         @db.LongText
  photo2        String?         @db.LongText
  photo3        String?         @db.LongText
  eventId       Int
  Event         Event           @relation(fields: [eventId], references: [id])
  VenueType     VenueType[]
  Booking       Booking[]
  FloralService FloralService[]
  TimePackage   TimePackage[]

  Review Review[]
}

model VenueType {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  photo       String?   @db.LongText
  description String    @db.Text
  price       Float
  venue_id    Int
  Venue       Venue     @relation(fields: [venue_id], references: [id])
  Booking     Booking[]
}

model FloralService {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  photo       String?   @db.LongText
  description String    @db.Text
  price       Float
  venue_id    Int
  Venue       Venue     @relation(fields: [venue_id], references: [id])
  Booking     Booking[]
  Event       Event?    @relation(fields: [eventId], references: [id])
  eventId     Int?
}

model TimePackage {
  id        Int       @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  venue_id  Int
  Venue     Venue     @relation(fields: [venue_id], references: [id])
  Booking   Booking[]
  Event     Event?    @relation(fields: [eventId], references: [id])
  eventId   Int?
}

model Booking {
  id       Int   @id @default(autoincrement())
  venue_id Int
  venue    Venue @relation(fields: [venue_id], references: [id])

  venueTypeId Int
  VenueType   VenueType @relation(fields: [venueTypeId], references: [id])

  floral_service_id Int
  floralService     FloralService @relation(fields: [floral_service_id], references: [id]) // ADD THIS

  timePackageId Int
  TimePackage   TimePackage @relation(fields: [timePackageId], references: [id])

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  booking_date DateTime
  total_amount Int
}

model Contact {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  email   String @db.VarChar(255)
  subject String @db.VarChar(255)
  message String @db.VarChar(255)

  @@map("contact")
}

model Review {
  id      Int  @id @default(autoincrement())
  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  rating      Int
  review_date DateTime
  description String   @db.Text

  venue_id Int
  Venue    Venue @relation(fields: [venue_id], references: [id])
}

model Description {
  id          Int     @id @default(autoincrement())
  photo       String? @db.LongText
  description String  @db.Text
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  eventId   Int?
  event     Event?   @relation(fields: [eventId], references: [id]) 
}


enum Role {
  user
  admin
}


